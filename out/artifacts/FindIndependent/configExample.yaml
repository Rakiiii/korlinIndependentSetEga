#Config file example
#It is yaml file, so any spaces,colons and dashes are important
#never use tabs here
#empty strings should be marked as ""


#type of testing graphHandler perfomance
#Can hold 2 values wright now:
# "vertextest" : for testing perfomance dependency on amount of vertex
# "edgestest" : for testing perfomance dependency on amount of edges 
# "ittest" : for testing results improvments depending to amount of itteration inside your graphhandler
# "parsetest" : for test on some files from dir
# "cmptest" : for comparing many graph handlers, cmptest config must be full
type_of_test: cmptest

#get state of test to stdout
#true or false
output_flag: true

#title which you want to see at the top of your graphic
graphic_title: "dependence of graph size to handilng time"

#amount of vetex wich you wanna have on first itteration can be only possitive integer
starting_amount_of_vertex: 5

#step size for ncrising amount vertex per itteration in <type_of_test:vetextest> 
 #amount of vertex on iterration with number <itterationNumber>  = starting_amount_of_vertex + vertex_differens * itterationNumber
#could be negative( if you wanna back step ) or positive int 
vertex_differens: 1

#if stop condition is vertex stop it will be max amount of vertex
max_amount_of_vertex:

#Amount of vertex on step number <it> will be counted as <starting_amount_of_vertex> + <it>*<vertex_differens> 

#amount of edges wich you wanna have on first itteration can be only possitive integer  
starting_amount_of_edges: 8

#step size for incrising amount edges per itteration in <type_of_test:edgestest> 
#amount of edges on iterration with number <itterationNumber>  = starting_amount_of_edges + edges_differens * itterationNumber
#could be negative( if you wanna back step ) or positive int 
edges_differens: 0

#if true amount of edges will be random
rnd_edges: true

#if stop condition is edges stop it will be max amount of edges
max_amount_of_edges:

#Amount of edges on step number <it> will be counted as <starting_amount_of_edges> + <it>*<edges_differrens>

#type of program stoping condition
#can be "timestop" or "itstop" or "mixed"
#"timestop" means that it wouldn't start new itteration of graphgene and grpahhandler ,if on preveous itteration time of graphhandler work
# was more then <max_time_for_itteration>
#"itstop" means fixed amount of itteration equls to <amount_of_itterations>
#"edgstop" means that test will be stoped after setted amount of edges are achived <WIP>
#"vertexstop" means that test will be stopped after setted amount of vertex are achived <WIP>
#"mixed" means that it will be stoped by first true condition of "timestop" and "itstop" 
type_of_stop_condition: itstop


#amount of itterations for starting pair <graphgene, graphhandler> 
#set it -1 if you use <timestop>
amount_of_itterations: 5

#amount of time of graphhandler work to do not start next itteration
#set it -1 if you use <itstop> 
max_time_for_itteration: -1

#path to file with amount of time for graphhandler work in ms 
#due to declaration, your graphhandler must generate a file with time of work
path_to_file_with_time: time


#flag for saving result of grpahhandler
#can be true or false
save_result_flag: true

#path for copy of graphhandler result
#pass empty if you want to save it to def dir
#if dir doesnt exict it will be generated
path_to_dir_for_result: ""

#path to file with result of graphhandler result
#will be coppied to <path_to_dir_for_result> dir or GraphResult dir if <path_to_dir_for_result> is empty
#pass empty if you dont want to save results of graphhandler work
path_to_file_with_result: result_graph 

#flag for saving generated graph
#could be true or false
save_generated_graph_flag: true

#path to dir for copping generated graphs
#set it empty if it should be default "GeneratedGraph"
#if dir doesnt exict it will be generated
path_to_dir_for_coping_generated_graph: ""

#path to file with graph generated by graphgene
#if it in the same directory as autoGraphTester add here name of file that generated by graph gene
#you can path this param to graphgene flags by setting <graphpath_param_position_graphgenerator> for no zero positive int value
#set ir empty if your graphhandler doesnt need it by param
graphpath: graph

#configuration of graphgenerator
#this string should be empty
graphgenerator_config:

  #path to graph generating programm
  graphgenerator_path: RandomGraphGenerator.jar

  #type of programm that you going to use for graphgene, if you use native app let it be empty , if you use some type of virtual machine type here command 
  #to start it 
  graphfenerator_type: java

  #flags for starting virtual machine that starts graphgene,if you use native app or you dont need flags, pass this empty
  #example: if you use java pass here your -Xmx,-Xms,-jar and other flags
  graphgenerator_vm_flags: '-jar'

  #flags to start your graphgene program
  #if you use more than 1 flag separete it as you do it when you start your app via terminal
  #set it empty if you dont need flags
  #this is masive if strings , so any new arg should start with new line and - before flag it self
  #if you need to insert amount of edges to flags of your grpah gene add "Aedges" to flags
  #if you need to insert amount of vertex to flags of your grpah gene add "Avertex" to flags
  #if you nedd to pass graph name equls to graphpath add "GraphPath" to flags
  graphgenerator_flags: 
  - '-fv'
  - Avertex
  - GraphPath
  - Aedges

  #programe via you want to start vm for your graph gene, depands on your platform
  #pass ir empty if your graph gene if native app
  vmstartergg: bash

  #flags which you want to pass to your vmstarterGG
  vmstartergg_flags:
    - '-c'

  ##if you want to see out put of your graphgenerator set it true,other ones set it false
  ggoutput: false

graphhandler_config:
  #type of programm that you going to use for graphhandler, if you use native app let it be empty , if you use some type of virtual machine type here command 
  #to start it 
  graphhandler_type: ""

  #flags for starting virtual machine that starts graphhandler,if you use native app or you dont need flags, pass this empty
  #example: if you use java pass here your -Xmx,-Xms,-jar and other flags
  graphhandler_vm_flags: ""

  #path to your graphhandler program
  graphhandler_path: /home/smurf/sc/rewriteAutoGraphTester/GraphBruteForce

  #flags for graphhandler program
    #this is masive if strings , so any new arg should start with new line and - before flag it self
    #if you need to insert amount of edges to flags of your grpahhandler add "Aedges" to flags
    #if you need to insert amount of vertex to flags of your grpahhandler add "Avertex" to flags
    #if you nedd to pass graph name equls to graphpath add "GraphPath" to flags
    #if you need to pass amount of itteration from "ittest" set it "iter"
  graphhandler_flags: 
  - '-s'
  - GraphPath
  - "3"
  - "1"
  
  #programe via you want to start vm for your graph gene, depands on your platform
  #pass ir empty if your graph gene if native app
  vmstartergh: ""

  #flags which you want to pass to your vmstarterGG
  vmstartergh_flags:
    - ""

  #if you want to see out put of your graphhandler set it true,other ones set it false
  ghoutput: true

#config of for type it test
ittest_config:
  
  #set behavor of graph generator
  #set it "no" if you do not need to start your graph gene at all and you put your generated graph with name <graphpath> at directory yourself
  #set "once" if you need to start graphgene once
  #every time if you need to start your graphgene every itteration
  graphgenerator_behavor:

  #path to file that contains on the first line number with result of graph handler
  #by def equls to <path_to_file_with_result>
  result_path:

  #start amount of itteration pased to "it" param
  start_amount_of_itteration:

  #step size for itterations
  itteration_difference:

#config for parser test
parsetest_config:

  #directory that contains file to handle
  path_to_dir_with_files:
  
  #patter of file name wich you want to handle
  file_mask:

  #path to file that contains on the first line number with result of graph handler
  #by def equls to <path_to_file_with_result>
  result_path_parsed:

#config for mark test
marktest_config:
  #do mark test flag bool type
  contains_mark: false

  #path to file with mark
  path_to_file: mark

  #draw differense between mark and result candle plot
  draw_diff_graphic: true

  #draw mark-result progression graphic
  draw_dyn_graphic: true

#config for advanced time testing option
#tester will found file @path_to_file put it to advtimeTab(1 colum is amount of edges[if edgetest] or vertex[if vertex test] 
#after information from @path_to_file)
#at the end of work it will draw graphic of time distribution if @draw_distribution_graphic is true
advtime_config:
  #flag for usage advtime
  #can be true or false
  enable_adv_time: true

  #path to file where tester will take advanced time charcteristic 
  path_to_file: advtime

  #flag for drawing distrubution of time from @path_to_file_with_adv_time
  #can be true or false
  draw_distribution_graphic: true
  
  #config for adv time plot
  adv_graphic_config:
    #set of color 
    #collection of strings 
    #every string is hex number length 4 or 7
    color_set:
      - "#0000FF"
      - "#00FF00"
      
    #set of name for color
    #collection of strings for plot legends
    #must be the same length as @color_set
    name_set:
      - "time for mark"
      - "time for partition"

#config for drawing extra graphics
#collections of such struct
extra_grphics_config:
    #name of file with result graphic
  - graphic_name:
    #must be csv file
    path_to_source:
    #name of fileds from csv which will be used for graphic draw
    #for "line" first one is X cord second is y cord
    #for "candels" is represented by TOHLCV  [ first is T, second is O and so on]
    #"multybars" is represented by set of bars stacked on each other [ firstone is x axis value,second is first part of bar,third is second part of bar and so on]
    #"multyline" is representing many lines on single graphics, pair of fields is representing single line
    name_fields:
    #Extra operation, must looks like [[operation1 nameOfOperand1 nameOfOperand2],[operation2 nameOfOperand1 nameOfOperand2]] to use result in graphic
    #must right "!oper1" to NameFields,
    #Possibel operations sub,plus,div,time
    operations:
    #Type of graphic chich will be drawen:"line","candels","multybars","multyline"
    #for "multybars" CFG must be non nil
    type:
    #label of x asix
    x_asix_label:
    #label of y asix
    y_asix_label:
    #label of graphic
    graphic_label:
    #string that contains 2 words with space : first : "top" or "bottom" second : "left" or "right"
    #default top,left
    legend_position:
    #bool if true legends will be added to grphic
    enable_legend:
    #some extra falgs, must be separate with spaces
    #if "nonzero" setted and candels flag than if C or H is zero then they will be setted the same way as O and L
    #if "positive" setted and "line" or multyline then x or y cord negative values would be setted as 0.0
    #if "inv" setted and candels flag than colors moved between upped and lowwer
    #if "nonzero" setted and "multybars" than must look "nonzero=[some number]" it will be YMin
    #if "length" setted and "multybars" than must look like "length=[some number]"[it will be vg.Length()]
    flags:
    adv_graphic_config:
      #string collection must contain hex colors
      color_set:
      #string collection must contains name of lines
      name_set:
#extra value to add to result tab
#can be used for drawing graphics
#is collection
extra_value_config:
  #path to file with extra value
  #must be in first line
  - path_to_file:
    #name of column in csv file
    value_name:
#config for cmp test
compare_test_config:
  #is bool,if true firstly all testable will stop, then results collected,if false or empty then results will be collected right after stop of every testable
  read_data_after_all_work: false
  #if true, main graphic will represent dependens of vertex/edges/it to time,if false or empty will represent dependesy to result value
  is_time_test: false
  #is collection of such stract, representing testable programs
  compares:
      #name for graphic
    - name: IndependetTester
      #path to program
      startable_path: /home/smurf/sc/rewriteAutoGraphTester/Test_Enviroment/IndependentSetTester
      #flags for program, same as graph handler
      startable_flags:
        - GraphPath
      #same as graph handler type
      startable_type:
      #flags for virtual machine, if native let it empty
      vm_flags:
      #program that you want to use to start vm
      vmstarter:
      #flags for vmstarter
      vmstarter_flags:
      #if true output of testable will be linked to stdout
      output: true
      #path to file with result
      path_to_result: result_graph
      #path to fle with time
      path_to_time: time
      #color of line on graphic, must be hexcolor if wrong or empty will be red
      line_color: "#00FF00"
      #name for graphic
    - name: EGA
      #path to program
      startable_path: FindIndependent.jar
      #flags for program, same as graph handler
      startable_flags:
        - GraphPath
        - Avertex
      #same as graph handler type
      startable_type: java
      #flags for virtual machine, if native let it empty
      vm_flags: '-jar'
      #program that you want to use to start vm
      vmstarter: bash
      #flags for vmstarter
      vmstarter_flags:
      #if true output of testable will be linked to stdout
      output: true
      #path to file with result
      path_to_result: result_graph
      #path to fle with time
      path_to_time: time
      #color of line on graphic, must be hexcolor if wrong or empty will be red
      line_color: "#0000FF"
